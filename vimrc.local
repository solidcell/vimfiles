let mapleader = ","

source ~/.vim/vimrc

call pathogen#helptags()

"show a modified notification in the statusline
set statusline+=%m

"remove scrollbars and such
set guioptions=e

set noequalalways

if has("gui_running") && ( has("gui_mac") || has("gui_macvim") )
  set fuoptions=maxvert,maxhorz
  set transparency=0
  set guifont=Menlo:h13
endif
set columns=2000
set lines=2000
colors solidcell

" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:▸\ ,eol:¬
"Invisible character colors
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#3a4a59

"character to show when wrap is set
set showbreak=↪

nmap <leader>r <Plug>RubyTestRun
nmap <Leader>R <Plug>RubyFileRun
nmap <Leader>/ <Plug>RubyTestRunLast

nnoremap <leader>t :CtrlP<CR>

"fold settings
set foldnestmax=10

"splitting and closing windows
nmap <leader>v :vs<CR>
nmap <leader>s :sp<CR>
nmap <leader>x :x<CR>

"open new split panes to right and bottom
set splitbelow
set splitright

"update the ctags
nmap <leader>ctags :!ctags -R .<CR>

"swapping buffers between windows
"http://stackoverflow.com/questions/2586984/how-can-i-swap-positions-of-two-open-files-in-splits-in-vim
function! MarkWindowSwap()
  let g:markedWinNum = winnr()
endfunction
function! DoWindowSwap()
  "Mark destination
  let curNum = winnr()
  let curBuf = bufnr( "%" )
  exe g:markedWinNum . "wincmd w"
  "Switch to source and shuffle dest->source
  let markedBuf = bufnr( "%" )
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' curBuf
  "Switch to dest and shuffle source->dest
  exe curNum . "wincmd w"
  "Hide and open so that we aren't prompted and keep history
  exe 'hide buf' markedBuf
endfunction
nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

"jump to the quickfix
nmap <leader>q :copen<CR>

"key mapping for window resizing
nmap < <C-w><
nmap > <C-w>>
nmap - <C-w>-
nmap + <C-w>+

"cursor movement while in insert mode
imap <C-h> <C-o>h
imap <C-j> <C-o>j
imap <C-k> <C-o>k
imap <C-l> <C-o>l

"NERDTree stuff
map <leader>[ :NERDTreeFind<CR>
hi directory term=bold gui=bold
let NERDTreeIgnore=['\.swp$']

"remove the mapping from vimrc that causes pausing after a 'w'
unmap wm
"remove the mappings from vimrc that causes the cursor to move after <Esc> and another key
nunmap <Esc>A
nunmap <Esc>B
nunmap <Esc>C
nunmap <Esc>D
iunmap <Esc>A
iunmap <Esc>B
iunmap <Esc>C
iunmap <Esc>D
"remove the mapping from vim-ruby-run
autocmd VimEnter * unmap <C-E>

"allow the mouse to make selections and then copy
set mouse=v

"ensure that tabs are 2 spaces
set tabstop=2
set shiftwidth=2
set softtabstop=2

"don't produce backup files. They're more annoying than they're worth.
set nobackup
set noswapfile

"highlight the column that's considered the maximum length
let &colorcolumn='80'
highlight ColorColumn ctermbg=235 guibg=#2c2d27

"leave cursor on the same line after a yank
vmap y y`]

"YankRing mapping
nnoremap <silent> & :YRShow<CR>

"Gundo mapping
noremap <silent> U :GundoToggle<CR>

"vim-gist settings
let g:gist_clip_command = 'pbcopy'
let g:gist_post_private = 1

"vim-gitgutter
highlight clear SignColumn
highlight GitGutterAdd ctermfg=green
highlight GitGutterChange ctermfg=yellow
highlight GitGutterDelete ctermfg=red
highlight GitGutterChangeDelete ctermfg=yellow

" ag (The Silver Searcher)
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
nnoremap \ :Ag<SPACE>
" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
